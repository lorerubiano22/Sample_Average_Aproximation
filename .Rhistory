smooth = smoother)
if (plot_points){
# plot points in red just to be on the safe side!
points3d(fdata, col = "blue")
}
if (plot_contour){
# plot the plane underneath
flat_matrix <- wide_form_values
if (verbose) print(flat_matrix)
y_intercept <- (zlim[2] - zlim[1]) * (-2/3) # put the flat matrix 1/2 the distance below the lower height
flat_matrix[which(flat_matrix != y_intercept)] <- y_intercept
if (verbose) print(flat_matrix)
rgl.surface(z = x_values,  ## these are all different because
x = y_values,  ## of the confusing way that
y = flat_matrix,  ## rgl.surface works! - y is the height!
coords = c(2,3,1),
color = col,
alpha = 1.0,
smooth = smoother)
}
}
plot_rgl_model_a <- function(fdata, plot_contour = T, plot_points = T,
verbose = F, colour = "rainbow", smoother = F){
## takes a model in long form, in the format
## 1st column x
## 2nd is y,
## 3rd is z (height)
## and draws an rgl model
## includes a contour plot below and plots the points in blue
## if these are set to TRUE
# note that x has to be ascending, followed by y
if (verbose) print(head(fdata))
fdata <- fdata[order(fdata[, 1], fdata[, 2]), ]
if (verbose) print(head(fdata))
##
require(reshape2)
require(rgl)
orig_names <- colnames(fdata)
colnames(fdata) <- c("x", "y", "z")
fdata <- as.data.frame(fdata)
## work out the min and max of x,y,z
xlimits <- c(min(fdata$x, na.rm = T), max(fdata$x, na.rm = T))
ylimits <- c(min(fdata$y, na.rm = T), max(fdata$y, na.rm = T))
zlimits <- c(min(fdata$z, na.rm = T), max(fdata$z, na.rm = T))
l <- list (x = xlimits, y = ylimits, z = zlimits)
xyz <- do.call(expand.grid, l)
if (verbose) print(xyz)
x_boundaries <- xyz$x
if (verbose) print(class(xyz$x))
y_boundaries <- xyz$y
if (verbose) print(class(xyz$y))
z_boundaries <- xyz$z
if (verbose) print(class(xyz$z))
if (verbose) print(paste(x_boundaries, y_boundaries, z_boundaries, sep = ";"))
# now turn fdata into a wide format for use with the rgl.surface
fdata[, 2] <- as.character(fdata[, 2])
fdata[, 3] <- as.character(fdata[, 3])
#if (verbose) print(class(fdata[, 2]))
wide_form <- dcast(fdata, y ~ x, value_var = "z")
if (verbose) print(head(wide_form))
wide_form_values <- as.matrix(wide_form[, 2:ncol(wide_form)])
if (verbose) print(wide_form_values)
x_values <- as.numeric(colnames(wide_form[2:ncol(wide_form)]))
y_values <- as.numeric(wide_form[, 1])
if (verbose) print(x_values)
if (verbose) print(y_values)
wide_form_values <- wide_form_values[order(y_values), order(x_values)]
wide_form_values <- as.numeric(wide_form_values)
x_values <- x_values[order(x_values)]
y_values <- y_values[order(y_values)]
if (verbose) print(x_values)
if (verbose) print(y_values)
if (verbose) print(dim(wide_form_values))
if (verbose) print(length(x_values))
if (verbose) print(length(y_values))
zlim <- range(wide_form_values)
if (verbose) print(zlim)
zlen <- zlim[2] - zlim[1] + 1
if (verbose) print(zlen)
if (colour == "rainbow"){
colourut <- rainbow(zlen, alpha = 0)
if (verbose) print(colourut)
col <- colourut[ wide_form_values - zlim[1] + 1]
# if (verbose) print(col)
} else {
col <- "grey"
if (verbose) print(table(col2))
}
open3d()
plot3d(x_boundaries, y_boundaries, z_boundaries,
box = T, col = "black",  xlab = orig_names[1],
ylab = orig_names[2], zlab = orig_names[3])
rgl.surface(z = x_values,  ## these are all different because
x = y_values,  ## of the confusing way that
y = wide_form_values,  ## rgl.surface works! - y is the height!
coords = c(2,3,1),
color = col,
alpha = 1.0,
lit = F,
smooth = smoother)
if (plot_points){
# plot points in red just to be on the safe side!
points3d(fdata, col = "blue")
}
if (plot_contour){
# plot the plane underneath
flat_matrix <- wide_form_values
if (verbose) print(flat_matrix)
y_intercept <- (zlim[2] - zlim[1]) * (-2/3) # put the flat matrix 1/2 the distance below the lower height
flat_matrix[which(flat_matrix != y_intercept)] <- y_intercept
if (verbose) print(flat_matrix)
rgl.surface(z = x_values,  ## these are all different because
x = y_values,  ## of the confusing way that
y = flat_matrix,  ## rgl.surface works! - y is the height!
coords = c(2,3,1),
color = col,
alpha = 1.0,
smooth = smoother)
}
}
add_rgl_model <- function(fdata){
## takes a model in long form, in the format
## 1st column x
## 2nd is y,
## 3rd is z (height)
## and draws an rgl model
##
# note that x has to be ascending, followed by y
print(head(fdata))
fdata <- fdata[order(fdata[, 1], fdata[, 2]), ]
print(head(fdata))
##
require(reshape2)
require(rgl)
orig_names <- colnames(fdata)
#print(head(fdata))
colnames(fdata) <- c("x", "y", "z")
fdata <- as.data.frame(fdata)
## work out the min and max of x,y,z
xlimits <- c(min(fdata$x, na.rm = T), max(fdata$x, na.rm = T))
ylimits <- c(min(fdata$y, na.rm = T), max(fdata$y, na.rm = T))
zlimits <- c(min(fdata$z, na.rm = T), max(fdata$z, na.rm = T))
l <- list (x = xlimits, y = ylimits, z = zlimits)
xyz <- do.call(expand.grid, l)
#print(xyz)
x_boundaries <- xyz$x
#print(class(xyz$x))
y_boundaries <- xyz$y
#print(class(xyz$y))
z_boundaries <- xyz$z
#print(class(xyz$z))
# now turn fdata into a wide format for use with the rgl.surface
fdata[, 2] <- as.character(fdata[, 2])
fdata[, 3] <- as.character(fdata[, 3])
#print(class(fdata[, 2]))
wide_form <- dcast(fdata, y ~ x, value_var = "z")
print(head(wide_form))
wide_form_values <- as.matrix(wide_form[, 2:ncol(wide_form)])
x_values <- as.numeric(colnames(wide_form[2:ncol(wide_form)]))
y_values <- as.numeric(wide_form[, 1])
print(x_values)
print(y_values)
wide_form_values <- wide_form_values[order(y_values), order(x_values)]
x_values <- x_values[order(x_values)]
y_values <- y_values[order(y_values)]
print(x_values)
print(y_values)
print(dim(wide_form_values))
print(length(x_values))
print(length(y_values))
rgl.surface(z = x_values,  ## these are all different because
x = y_values,  ## of the confusing way that
y = wide_form_values,  ## rgl.surface works!
coords = c(2,3,1),
alpha = .8)
# plot points in red just to be on the safe side!
points3d(fdata, col = "red")
}
x=runif(1000)
y=runif(1000)
z=rnorm(1000)
s=interp(x,y,z,duplicate="strip")
surface3d(s$x,s$y,s$z,color="blue")
points3d(s)
persp(seq(10, 300, 5), seq(10, 300, 5), z, phi = 45, theta = 45,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data"
)
installed.packages("stringr")
library(stringr)
library(scatterplot3d)
rm(list=ls(all=TRUE))
require("plot3D")
require("rgl")
require("misc3d")
library(akima)
library(plot3D)
library(plotly)
packageVersion('plotly')
install.packages("fmsb")
library(fmsb)
installed.packages("stringr")
install.packages("fmsb")
library(stringr)
library(fmsb)
library(ggplot2)
readDetermiticOutputs<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[1]," = ")[[1]][2]),2)
runTime<-length(fil)
d<-c(profit,runTime)
return(d)}
readDetermiticOutputsSim<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[6],":")[[1]][2]),2)
runTime<-round(as.numeric(strsplit(fil[8],":")[[1]][2]),2)
d<-c(profit,runTime)
return(d)}
####DIRECTORIES####
dir1CPLEX<-"C://Users//lorena.reyes//Dropbox//JAVA//teamOrientingVNS_Ext"
dir1SIMHEURISTIC<-"C://Users//lorena.reyes//Dropbox//JAVA//teamOrientingVNS_Ext//outputs"
setwd(dir1CPLEX)
dir1CPLEX<-NULL
listFolders1<-list.files(dir1CPLEX)
######CONSOLIDATION OF ALL OUTPUTS
listFilesTxt<-grep(pattern = "CPLEX.txt", list.files(dir1CPLEX), value = TRUE)
###### READING THE FILES
for(l in 1:length(listFilesTxt)){
mat<-matrix(0,ncol = 5,nrow=1)
afile<-listFilesTxt[l]
dirSol<-paste(dir1CPLEX,"//",afile,sep="")
a<-strsplit(afile,"_")
#Parameters
aux<-strsplit(a[[1]][1],"1000")
instance<-aux[[1]][1]
aux<-strsplit(a[[1]][3],"Stoch")
variance<-aux[[1]][1]
lsim<-1000
#Outcomes
mat[1,1]<-instance
mat[1,2]<-lsim
mat[1,3]<-variance
DT<-readDetermiticOutputs(dirSol)
mat[1,4:5]<-DT
resultatsCPLEX<-rbind(resultatsCPLEX,mat)}
colnames(resultatsCPLEX)<-c("Id","lSim","Variance","profit","Computime")
install.packages("fmsb")
readDetermiticOutputs<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[1]," = ")[[1]][2]),2)
runTime<-length(fil)
d<-c(profit,runTime)
return(d)}
readDetermiticOutputsSim<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[6],":")[[1]][2]),2)
runTime<-round(as.numeric(strsplit(fil[8],":")[[1]][2]),2)
d<-c(profit,runTime)
return(d)}
####DIRECTORIES####
dir1CPLEX<-"C://Users//lorena.reyes//Dropbox//JAVA//teamOrientingVNS_Ext"
dir1SIMHEURISTIC<-"C://Users//lorena.reyes//Dropbox//JAVA//teamOrientingVNS_Ext//outputs"
setwd(dir1CPLEX)
dir1CPLEX<-NULL
listFolders1<-list.files(dir1CPLEX)
######CONSOLIDATION OF ALL OUTPUTS
listFilesTxt<-grep(pattern = "CPLEX.txt", list.files(dir1CPLEX), value = TRUE)
###### READING THE FILES
for(l in 1:length(listFilesTxt)){
mat<-matrix(0,ncol = 5,nrow=1)
afile<-listFilesTxt[l]
dirSol<-paste(dir1CPLEX,"//",afile,sep="")
a<-strsplit(afile,"_")
#Parameters
aux<-strsplit(a[[1]][1],"1000")
instance<-aux[[1]][1]
aux<-strsplit(a[[1]][3],"Stoch")
variance<-aux[[1]][1]
lsim<-1000
#Outcomes
mat[1,1]<-instance
mat[1,2]<-lsim
mat[1,3]<-variance
DT<-readDetermiticOutputs(dirSol)
mat[1,4:5]<-DT
resultatsCPLEX<-rbind(resultatsCPLEX,mat)}
colnames(resultatsCPLEX)<-c("Id","lSim","Variance","profit","Computime")
#Results simheuristic#
setwd(dir1SIMHEURISTIC)
resultatsSimheuristic<-NULL
listFolders1<-list.files(dir1SIMHEURISTIC)
######CONSOLIDATION OF ALL OUTPUTS
listFilesTxt<-grep(pattern = ".txt", list.files(dir1SIMHEURISTIC), value = TRUE)
for(l in 1:length(listFilesTxt)){
mat<-matrix(0,ncol = 5,nrow=1)
afile<-listFilesTxt[l]
dirSol<-paste(dir1SIMHEURISTIC,"//",afile,sep="")
a<-strsplit(afile,"_")
# Parameters
instance<-a[[1]][1]
variance<-a[[1]][3]
lsim<-1000
#Outcomes
mat[1,1]<-instance
mat[1,2]<-lsim
mat[1,3]<-variance
fil<-dirSol
DT<-readDetermiticOutputsSim(dirSol)
mat[1,4:5]<-DT
resultatsSimheuristic<-rbind(resultatsSimheuristic,mat)}
colnames(resultatsSimheuristic)<-c("Id","lSim","Variance","profit","Computime")
readDetermiticOutputs<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[1]," = ")[[1]][2]),2)
runTime<-length(fil)
d<-c(profit,runTime)
return(d)}
readDetermiticOutputsSim<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[6],":")[[1]][2]),2)
runTime<-round(as.numeric(strsplit(fil[8],":")[[1]][2]),2)
d<-c(profit,runTime)
return(d)}
####DIRECTORIES####
dir1CPLEX<-"C://Users//lorena.reyes//Dropbox//JAVA//teamOrientingVNS_Ext"
dir1SIMHEURISTIC<-"C://Users//lorena.reyes//Dropbox//JAVA//teamOrientingVNS_Ext//outputs"
setwd(dir1CPLEX)
dir1CPLEX<-NULL
listFolders1<-list.files(dir1CPLEX)
######CONSOLIDATION OF ALL OUTPUTS
listFilesTxt<-grep(pattern = "CPLEX.txt", list.files(dir1CPLEX), value = TRUE)
###### READING THE FILES
for(l in 1:length(listFilesTxt)){
mat<-matrix(0,ncol = 5,nrow=1)
afile<-listFilesTxt[l]
dirSol<-paste(dir1CPLEX,"//",afile,sep="")
a<-strsplit(afile,"_")
#Parameters
aux<-strsplit(a[[1]][1],"1000")
instance<-aux[[1]][1]
aux<-strsplit(a[[1]][3],"Stoch")
variance<-aux[[1]][1]
lsim<-1000
#Outcomes
mat[1,1]<-instance
mat[1,2]<-lsim
mat[1,3]<-variance
DT<-readDetermiticOutputs(dirSol)
mat[1,4:5]<-DT
resultatsCPLEX<-rbind(resultatsCPLEX,mat)}
colnames(resultatsCPLEX)<-c("Id","lSim","Variance","profit","Computime")
readDetermiticOutputs<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[1]," = ")[[1]][2]),2)
runTime<-length(fil)
d<-c(profit,runTime)
return(d)}
readDetermiticOutputsSim<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[6],":")[[1]][2]),2)
runTime<-round(as.numeric(strsplit(fil[8],":")[[1]][2]),2)
d<-c(profit,runTime)
return(d)}
####DIRECTORIES####
dir1CPLEX<-"C://Users//lorena.reyes//Dropbox//JAVA//teamOrientingVNS_Ext"
dir1SIMHEURISTIC<-"C://Users//lorena.reyes//Dropbox//JAVA//teamOrientingVNS_Ext//outputs"
setwd(dir1CPLEX)
dir1CPLEX<-NULL
listFolders1<-list.files(dir1CPLEX)
######CONSOLIDATION OF ALL OUTPUTS
listFilesTxt<-grep(pattern = "CPLEX.txt", list.files(dir1CPLEX), value = TRUE)
resultatsCPLEX<-NULL
###### READING THE FILES
for(l in 1:length(listFilesTxt)){
mat<-matrix(0,ncol = 5,nrow=1)
afile<-listFilesTxt[l]
dirSol<-paste(dir1CPLEX,"//",afile,sep="")
a<-strsplit(afile,"_")
#Parameters
aux<-strsplit(a[[1]][1],"1000")
instance<-aux[[1]][1]
aux<-strsplit(a[[1]][3],"Stoch")
variance<-aux[[1]][1]
lsim<-1000
#Outcomes
mat[1,1]<-instance
mat[1,2]<-lsim
mat[1,3]<-variance
DT<-readDetermiticOutputs(dirSol)
mat[1,4:5]<-DT
resultatsCPLEX<-rbind(resultatsCPLEX,mat)}
colnames(resultatsCPLEX)<-c("Id","lSim","Variance","profit","Computime")
setwd(dir1CPLEX)
dir1CPLEX<-NULL
listFolders1<-list.files(dir1CPLEX)
######CONSOLIDATION OF ALL OUTPUTS
listFilesTxt<-grep(pattern = "CPLEX.txt", list.files(dir1CPLEX), value = TRUE)
resultatsCPLEX<-NULL
readDetermiticOutputs<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[1]," = ")[[1]][2]),2)
runTime<-length(fil)
d<-c(profit,runTime)
return(d)}
readDetermiticOutputsSim<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[6],":")[[1]][2]),2)
runTime<-round(as.numeric(strsplit(fil[8],":")[[1]][2]),2)
d<-c(profit,runTime)
return(d)}
####DIRECTORIES####
dir1CPLEX<-"C://Users//lorena.reyes//Dropbox//JAVA//teamOrientingVNS_Ext"
setwd(dir1CPLEX)
dir1CPLEX<-NULL
listFolders1<-list.files(dir1CPLEX)
######CONSOLIDATION OF ALL OUTPUTS
listFilesTxt<-grep(pattern = "CPLEX.txt", list.files(dir1CPLEX), value = TRUE)
resultatsCPLEX<-NULL
dir1CPLEX<-"C://Users//lorena.reyes//Dropbox//JAVA//teamOrientingVNS_Ext"
dir1CPLEX
setwd(dir1CPLEX)
dir1CPLEX<-NULL
listFolders1<-list.files(dir1CPLEX)
gtwd()
getwd()
installed.packages("stringr")
library(stringr)
library(scatterplot3d)
rm(list=ls(all=TRUE))
require("plot3D")
require("rgl")
require("misc3d")
library(akima)
library(plot3D)
library(plotly)
packageVersion('plotly')
install.packages("fmsb")
library(fmsb)
installed.packages("stringr")
install.packages("fmsb")
library(stringr)
library(fmsb)
library(ggplot2)
install.packages("fmsb")
readDetermiticOutputs<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[1]," = ")[[1]][2]),2)
runTime<-length(fil)
d<-c(profit,runTime)
return(d)}
readDetermiticOutputsSim<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[6],":")[[1]][2]),2)
runTime<-round(as.numeric(strsplit(fil[8],":")[[1]][2]),2)
d<-c(profit,runTime)
return(d)}
dir1CPLEX<-"C://Users//lorena.reyes//Dropbox//JAVA//teamOrientingVNS_Ext"
setwd(dir1CPLEX)
dir1CPLEX<-NULL
listFolders1<-list.files(dir1CPLEX)
list.files(dir1CPLEX)
dir1CPLEX<-"C://Users//lorena.reyes//Dropbox//JAVA//teamOrientingVNS_Ext//"
setwd(dir1CPLEX)
dir1CPLEX<-NULL
listFolders1<-list.files(dir1CPLEX)
installed.packages("stringr")
library(stringr)
library(scatterplot3d)
rm(list=ls(all=TRUE))
readDetermiticOutputs<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[1]," = ")[[1]][2]),2)
runTime<-length(fil)
d<-c(profit,runTime)
return(d)}
readDetermiticOutputsSim<-function(fil){
fil<-readLines(fil)
profit<-round(as.numeric(strsplit(fil[6],":")[[1]][2]),2)
runTime<-round(as.numeric(strsplit(fil[8],":")[[1]][2]),2)
d<-c(profit,runTime)
return(d)}
dir1CPLEX<-"C://Users//lorena.reyes//Dropbox//JAVA//teamOrientingVNS_Ext//"
setwd(dir1CPLEX)
listFolders1<-list.files(dir1CPLEX)
setwd(dir1CPLEX)
resultatsCPLEX<-NULL
listFolders1<-list.files(dir1CPLEX)
######CONSOLIDATION OF ALL OUTPUTS
listFilesTxt<-grep(pattern = "CPLEX.txt", list.files(dir1CPLEX), value = TRUE)
resultatsCPLEX<-NULL
###### READING THE FILES
for(l in 1:length(listFilesTxt)){
mat<-matrix(0,ncol = 5,nrow=1)
afile<-listFilesTxt[l]
dirSol<-paste(dir1CPLEX,"//",afile,sep="")
a<-strsplit(afile,"_")
#Parameters
aux<-strsplit(a[[1]][1],"1000")
instance<-aux[[1]][1]
aux<-strsplit(a[[1]][3],"Stoch")
variance<-aux[[1]][1]
lsim<-1000
#Outcomes
mat[1,1]<-instance
mat[1,2]<-lsim
mat[1,3]<-variance
DT<-readDetermiticOutputs(dirSol)
mat[1,4:5]<-DT
resultatsCPLEX<-rbind(resultatsCPLEX,mat)}
colnames(resultatsCPLEX)<-c("Id","lSim","Variance","profit","Computime")
View(resultatsCPLEX)
write.table(resultatsCPLEX, file = "resultatsCPLEX.csv",row.names=FALSE, na="",col.names=TRUE, sep=";")
